The `RegistryClient` class handles service registration and discovery in a microservices architecture. It provides functionality to:
1. Register/unregister services with a central registry
2. Maintain heartbeats to keep services alive in the registry
3. Discover available service instances
4. Load balance requests across service instances
5. Execute callbacks when dependent services become available

The client uses scheduled executors for periodic tasks like heartbeats (every 2.5s) and load balancer updates, and interacts with the registry via REST calls. It supports configurable hostnames, ports, and registry URLs through JNDI lookups.